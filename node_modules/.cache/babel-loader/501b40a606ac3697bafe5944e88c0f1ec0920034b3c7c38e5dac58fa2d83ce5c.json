{"ast":null,"code":"import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n// Flag to track if checks are completed\nlet checkCompleted = false;\nlet tablesVerified = false;\n\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async tableName => {\n  try {\n    // Add a timeout to prevent blocking the app startup\n    const timeoutPromise = new Promise(resolve => {\n      setTimeout(() => resolve(true), 2000); // 2 second timeout\n    });\n\n    // Intenta hacer una consulta mínima a la tabla - usando GET en lugar de HEAD\n    const queryPromise = new Promise(async resolve => {\n      try {\n        const {\n          error\n        } = await supabase.from(tableName).select('id') // Solo seleccionar ID en lugar de usar HEAD\n        .limit(1);\n        resolve(!error);\n      } catch (error) {\n        console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n        resolve(false);\n      }\n    });\n\n    // Return true if either the query succeeds or the timeout is reached\n    return await Promise.race([queryPromise, timeoutPromise]);\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    return true; // Assume table exists on error to prevent blocking the app\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async () => {\n  const tableList = Object.values(TABLES);\n  const results = [];\n  for (const tableName of tableList) {\n    try {\n      const exists = await checkTableExists(tableName);\n      results.push({\n        name: tableName,\n        exists\n      });\n    } catch (e) {\n      // If checking a table fails, assume it exists to prevent blocking the app\n      console.warn(`Error checking table ${tableName}:`, e);\n      results.push({\n        name: tableName,\n        exists: true\n      });\n    }\n  }\n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async () => {\n  if (checkCompleted) return;\n  console.info('Verificando estructura de la base de datos...');\n  try {\n    const tableStatus = await checkAllTables();\n    console.group('Estado de tablas:');\n    tableStatus.forEach(table => {\n      if (table.exists) {\n        console.info(`✅ Tabla ${table.name}: OK`);\n      } else {\n        console.warn(`❌ Tabla ${table.name}: No existe o no se pudo verificar`);\n      }\n    });\n    console.groupEnd();\n    const missingTables = tableStatus.filter(t => !t.exists);\n    if (missingTables.length > 0) {\n      console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n    } else {\n      console.info('Todas las tablas necesarias existen en la base de datos o se asumen existentes.');\n      tablesVerified = true;\n    }\n  } catch (error) {\n    console.error('Error general verificando estructura de base de datos:', error);\n    // Don't block app startup on errors\n  } finally {\n    checkCompleted = true;\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = () => {\n  // Run the verification in a non-blocking way\n  setTimeout(() => {\n    logTableStatus().then(() => console.log('Database structure check completed')).catch(error => {\n      console.error('Error verificando estructura de base de datos:', error);\n    });\n  }, 3000); // Delay the check by 3 seconds to allow the app to start first\n};\n\n// Export a function to check if tables are verified\nexport const areTablesVerified = () => {\n  return tablesVerified || checkCompleted;\n};","map":{"version":3,"names":["supabase","TABLES","checkCompleted","tablesVerified","checkTableExists","tableName","timeoutPromise","Promise","resolve","setTimeout","queryPromise","error","from","select","limit","console","warn","race","checkAllTables","tableList","Object","values","results","exists","push","name","e","logTableStatus","info","tableStatus","group","forEach","table","groupEnd","missingTables","filter","t","length","initDbStructureCheck","then","log","catch","areTablesVerified"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/dbStructureCheck.ts"],"sourcesContent":["import { supabase } from '../lib/supabaseClient';\nimport { TABLES } from './constants/tables';\n\ninterface TableStatus {\n  name: string;\n  exists: boolean;\n}\n\n// Flag to track if checks are completed\nlet checkCompleted = false;\nlet tablesVerified = false;\n\n/**\n * Verifica si una tabla existe en la base de datos\n * @param tableName Nombre de la tabla a verificar\n * @returns Boolean indicando si la tabla existe\n */\nexport const checkTableExists = async (tableName: string): Promise<boolean> => {\n  try {\n    // Add a timeout to prevent blocking the app startup\n    const timeoutPromise = new Promise<boolean>((resolve) => {\n      setTimeout(() => resolve(true), 2000); // 2 second timeout\n    });\n\n    // Intenta hacer una consulta mínima a la tabla - usando GET en lugar de HEAD\n    const queryPromise = new Promise<boolean>(async (resolve) => {\n      try {\n        const { error } = await supabase\n          .from(tableName)\n          .select('id') // Solo seleccionar ID en lugar de usar HEAD\n          .limit(1);\n        \n        resolve(!error);\n      } catch (error) {\n        console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n        resolve(false);\n      }\n    });\n    \n    // Return true if either the query succeeds or the timeout is reached\n    return await Promise.race([queryPromise, timeoutPromise]);\n  } catch (error) {\n    console.warn(`Error verificando si la tabla ${tableName} existe:`, error);\n    return true; // Assume table exists on error to prevent blocking the app\n  }\n};\n\n/**\n * Verifica todas las tablas importantes del sistema\n * @returns Array con el estado de cada tabla\n */\nexport const checkAllTables = async (): Promise<TableStatus[]> => {\n  const tableList = Object.values(TABLES);\n  const results: TableStatus[] = [];\n  \n  for (const tableName of tableList) {\n    try {\n      const exists = await checkTableExists(tableName);\n      results.push({\n        name: tableName,\n        exists\n      });\n    } catch (e) {\n      // If checking a table fails, assume it exists to prevent blocking the app\n      console.warn(`Error checking table ${tableName}:`, e);\n      results.push({\n        name: tableName,\n        exists: true\n      });\n    }\n  }\n  \n  return results;\n};\n\n/**\n * Imprime en consola el estado de las tablas\n */\nexport const logTableStatus = async (): Promise<void> => {\n  if (checkCompleted) return;\n  \n  console.info('Verificando estructura de la base de datos...');\n  try {\n    const tableStatus = await checkAllTables();\n    \n    console.group('Estado de tablas:');\n    tableStatus.forEach(table => {\n      if (table.exists) {\n        console.info(`✅ Tabla ${table.name}: OK`);\n      } else {\n        console.warn(`❌ Tabla ${table.name}: No existe o no se pudo verificar`);\n      }\n    });\n    console.groupEnd();\n    \n    const missingTables = tableStatus.filter(t => !t.exists);\n    if (missingTables.length > 0) {\n      console.warn(`Se encontraron ${missingTables.length} tablas faltantes. La aplicación podría no funcionar correctamente.`);\n    } else {\n      console.info('Todas las tablas necesarias existen en la base de datos o se asumen existentes.');\n      tablesVerified = true;\n    }\n  } catch (error) {\n    console.error('Error general verificando estructura de base de datos:', error);\n    // Don't block app startup on errors\n  } finally {\n    checkCompleted = true;\n  }\n};\n\n/**\n * Inicializa la verificación de estructura de BD al inicio de la aplicación\n */\nexport const initDbStructureCheck = (): void => {\n  // Run the verification in a non-blocking way\n  setTimeout(() => {\n    logTableStatus()\n      .then(() => console.log('Database structure check completed'))\n      .catch((error) => {\n        console.error('Error verificando estructura de base de datos:', error);\n      });\n  }, 3000); // Delay the check by 3 seconds to allow the app to start first\n};\n\n// Export a function to check if tables are verified\nexport const areTablesVerified = (): boolean => {\n  return tablesVerified || checkCompleted;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}