{"ast":null,"code":"// Format currency with Mexican peso symbol\nexport const formatCurrency = amount => {\n  if (amount === null || amount === undefined) return '$0.00';\n  return new Intl.NumberFormat('es-MX', {\n    style: 'currency',\n    currency: 'MXN',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\n\n// Format a date string to a more readable format\nexport const formatDate = dateString => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  };\n  return date.toLocaleDateString('es-MX', options);\n};\n\n// Format a date to YYYY-MM-DD format\nexport const formatDateYMD = date => {\n  if (!date) return '';\n  const d = new Date(date);\n  return d.toISOString().split('T')[0];\n};\n\n// Format a phone number\nexport const formatPhone = phone => {\n  if (!phone) return '';\n\n  // Remove non-numeric characters\n  const cleaned = phone.replace(/\\D/g, '');\n\n  // Format as (XXX) XXX-XXXX if 10 digits\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n\n  // Return the cleaned string if not 10 digits\n  return cleaned;\n};\n\n// Format a number as percentage\nexport const formatPercentage = value => {\n  if (value === null || value === undefined) return '0%';\n  return `${(Number(value) * 100).toFixed(2)}%`;\n};\n\n// Truncate long text with ellipsis\nexport const truncateText = (text, maxLength = 50) => {\n  if (!text || text.length <= maxLength) return text;\n  return `${text.slice(0, maxLength)}...`;\n};\n\n// Format file size\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["formatCurrency","amount","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatDate","dateString","date","Date","options","year","month","day","hour","minute","toLocaleDateString","formatDateYMD","d","toISOString","split","formatPhone","phone","cleaned","replace","length","slice","formatPercentage","value","Number","toFixed","truncateText","text","maxLength","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/utils/formatters.js"],"sourcesContent":["// Format currency with Mexican peso symbol\nexport const formatCurrency = (amount) => {\n  if (amount === null || amount === undefined) return '$0.00';\n  \n  return new Intl.NumberFormat('es-MX', {\n    style: 'currency',\n    currency: 'MXN',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\n\n// Format a date string to a more readable format\nexport const formatDate = (dateString) => {\n  if (!dateString) return '';\n  \n  const date = new Date(dateString);\n  const options = { \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  };\n  \n  return date.toLocaleDateString('es-MX', options);\n};\n\n// Format a date to YYYY-MM-DD format\nexport const formatDateYMD = (date) => {\n  if (!date) return '';\n  \n  const d = new Date(date);\n  return d.toISOString().split('T')[0];\n};\n\n// Format a phone number\nexport const formatPhone = (phone) => {\n  if (!phone) return '';\n  \n  // Remove non-numeric characters\n  const cleaned = phone.replace(/\\D/g, '');\n  \n  // Format as (XXX) XXX-XXXX if 10 digits\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  }\n  \n  // Return the cleaned string if not 10 digits\n  return cleaned;\n};\n\n// Format a number as percentage\nexport const formatPercentage = (value) => {\n  if (value === null || value === undefined) return '0%';\n  \n  return `${(Number(value) * 100).toFixed(2)}%`;\n};\n\n// Truncate long text with ellipsis\nexport const truncateText = (text, maxLength = 50) => {\n  if (!text || text.length <= maxLength) return text;\n  return `${text.slice(0, maxLength)}...`;\n};\n\n// Format file size\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}