{"ast":null,"code":"var _jsxFileName = \"/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Constantes para almacenamiento\nconst STORAGE_KEY_USER = 'crm_user';\nconst STORAGE_KEY_TOKEN = 'crm_token';\nconst STORAGE_KEY_TOKEN_EXP = 'crm_token_exp';\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true); // Cambiado a true para evitar parpadeo\n  const [error, setError] = useState(null);\n\n  // Generar un token único para la sesión (simplificado)\n  const generateToken = () => {\n    const randomPart = Math.random().toString(36).substring(2, 15);\n    const timestampPart = Date.now().toString(36);\n    return `${randomPart}${timestampPart}`;\n  };\n\n  // Establecer el token con tiempo de expiración (12 horas por defecto)\n  const setSessionToken = (token, expireHours = 12) => {\n    const expiration = new Date();\n    expiration.setHours(expiration.getHours() + expireHours);\n    localStorage.setItem(STORAGE_KEY_TOKEN, token);\n    localStorage.setItem(STORAGE_KEY_TOKEN_EXP, expiration.toISOString());\n  };\n\n  // Verificar si el token ha expirado\n  const isTokenExpired = () => {\n    const expirationStr = localStorage.getItem(STORAGE_KEY_TOKEN_EXP);\n    if (!expirationStr) return true;\n    const expiration = new Date(expirationStr);\n    return new Date() > expiration;\n  };\n\n  // Verificar sesión al iniciar\n  useEffect(() => {\n    const checkStoredSession = () => {\n      try {\n        // Primero verificar si el token existe y no ha expirado\n        const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n        if (token && !isTokenExpired()) {\n          // Si el token es válido, recuperar datos del usuario\n          const storedUser = localStorage.getItem(STORAGE_KEY_USER);\n          if (storedUser) {\n            setUser(JSON.parse(storedUser));\n          }\n        } else if (token) {\n          // Si el token ha expirado, limpiar la sesión\n          console.log('La sesión ha expirado');\n          localStorage.removeItem(STORAGE_KEY_TOKEN);\n          localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n          localStorage.removeItem(STORAGE_KEY_USER);\n        }\n      } catch (error) {\n        console.error('Error checking stored session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkStoredSession();\n\n    // Listener para sincronizar múltiples pestañas\n    const handleStorageChange = event => {\n      if (event.key === STORAGE_KEY_USER) {\n        if (!event.newValue) {\n          // Usuario se deslogueó en otra pestaña\n          setUser(null);\n          setSession(null);\n        } else {\n          // Usuario se logueó en otra pestaña\n          setUser(JSON.parse(event.newValue));\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN'\n        };\n\n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n\n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(mockUser));\n        setUser(mockUser);\n        return {\n          data: {\n            user: mockUser\n          },\n          error: null\n        };\n      }\n      const errorMsg = 'Credenciales inválidas';\n      setError(new Error(errorMsg));\n      return {\n        data: null,\n        error: errorMsg\n      };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      setError(error instanceof Error ? error : new Error('Error al iniciar sesión'));\n      return {\n        error,\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signInWithCode = async (accessCode, userType) => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('Starting signInWithCode process...');\n      console.log(`Attempting to authenticate ${userType} with code: ${accessCode}`);\n\n      // Initialize Supabase client directly\n      const supabaseUrl = 'https://ydnygntfkrleiseuciwq.supabase.co';\n      const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkbnlnbnRma3JsZWlzZXVjaXdxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTk5MjQwNiwiZXhwIjoyMDU1NTY4NDA2fQ.TwhEGW9DK4DTQQRquT6Z9UW8T8UjLX-hp9uKdRjWAhs';\n      console.log('Creating Supabase client with URL:', supabaseUrl);\n      const supabase = createClient(supabaseUrl, supabaseKey);\n\n      // Query the appropriate table based on user type\n      let userData = null;\n      let error = null;\n      try {\n        if (userType === USER_ROLES.ADVISOR) {\n          console.log('Querying advisors table...');\n          const {\n            data,\n            error: queryError\n          } = await supabase.from('advisors').select('*').eq('access_code', accessCode).limit(1);\n          userData = data && data.length > 0 ? data[0] : null;\n          error = queryError;\n          console.log('Advisors query result:', {\n            dataFound: !!userData,\n            error: error ? error.message : null\n          });\n        } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n          var _message;\n          console.log('Querying company_admins table...');\n\n          // First check if the table exists by doing a simple select\n          const {\n            error: tableCheckError\n          } = await supabase.from('company_admins').select('id').limit(1);\n          if (tableCheckError && typeof tableCheckError === 'object' && 'message' in tableCheckError && (_message = tableCheckError.message) !== null && _message !== void 0 && _message.includes('relation \"company_admins\" does not exist')) {\n            console.error('The company_admins table does not exist in the database');\n            // Fall back to using the advisors table for company admins\n            const {\n              data,\n              error: queryError\n            } = await supabase.from('advisors').select('*').eq('access_code', accessCode).limit(1);\n            userData = data && data.length > 0 ? data[0] : null;\n            error = queryError;\n            console.log('Fallback to advisors table result:', {\n              dataFound: !!userData,\n              error: error ? error.message : null\n            });\n          } else {\n            const {\n              data,\n              error: queryError\n            } = await supabase.from('company_admins').select('*').eq('access_code', accessCode).limit(1);\n            userData = data && data.length > 0 ? data[0] : null;\n            error = queryError;\n            console.log('Company admins query result:', {\n              dataFound: !!userData,\n              error: error ? error.message : null\n            });\n          }\n        } else {\n          console.error('Invalid user type:', userType);\n          return {\n            data: null,\n            error: 'Tipo de usuario no válido'\n          };\n        }\n      } catch (queryError) {\n        console.error('Error during database query:', queryError);\n        error = queryError;\n      }\n      if (error) {\n        console.error('Database error:', error);\n        const errorMessage = error instanceof Error || error.message ? error.message || error.toString() : 'Error desconocido';\n        return {\n          data: null,\n          error: 'Error de base de datos: ' + errorMessage\n        };\n      }\n      if (!userData) {\n        console.log('No user found with provided access code');\n        return {\n          data: null,\n          error: 'Código de acceso inválido'\n        };\n      }\n      console.log('User data found:', {\n        id: userData.id,\n        email: userData.email,\n        role: userType\n      });\n      const userInfo = {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        role: userType,\n        entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id\n      };\n\n      // Generar y guardar token de sesión\n      const token = generateToken();\n      setSessionToken(token);\n\n      // Guardar datos del usuario\n      localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(userInfo));\n      setUser(userInfo);\n      console.log('Login successful, user info stored in localStorage');\n      return {\n        data: {\n          user: userInfo\n        },\n        error: null\n      };\n    } catch (error) {\n      console.error('Error signing in with code:', error);\n      // Ensure returned error is always a string\n      const errorObj = error instanceof Error ? error : new Error('Error al iniciar sesión');\n      setError(errorObj);\n      return {\n        error: errorObj.message,\n        data: null\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      // Eliminar todos los datos de sesión\n      localStorage.removeItem(STORAGE_KEY_USER);\n      localStorage.removeItem(STORAGE_KEY_TOKEN);\n      localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    session,\n    loading,\n    error,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"LVgY9thq53V2QKvsGPMuZFztU44=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createClient","USER_ROLES","jsxDEV","_jsxDEV","STORAGE_KEY_USER","STORAGE_KEY_TOKEN","STORAGE_KEY_TOKEN_EXP","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","session","setSession","loading","setLoading","error","setError","generateToken","randomPart","Math","random","toString","substring","timestampPart","Date","now","setSessionToken","token","expireHours","expiration","setHours","getHours","localStorage","setItem","toISOString","isTokenExpired","expirationStr","getItem","checkStoredSession","storedUser","JSON","parse","console","log","removeItem","handleStorageChange","event","key","newValue","window","addEventListener","removeEventListener","signIn","email","password","mockUser","id","name","role","stringify","data","errorMsg","signInWithCode","accessCode","userType","supabaseUrl","supabaseKey","supabase","userData","ADVISOR","queryError","from","select","eq","limit","length","dataFound","message","COMPANY_ADMIN","_message","tableCheckError","includes","errorMessage","userInfo","entityId","company_id","errorObj","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Session, createClient, PostgrestError } from '@supabase/supabase-js';\nimport { USER_ROLES } from '../utils/constants/roles';\n\n// Tipos\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n  entityId?: string; // ID del asesor o empresa asociada\n}\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  error: Error | null;\n  signIn: (email: string, password: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signInWithCode: (accessCode: string, userType: string) => Promise<{\n    error: any | null;\n    data: any | null;\n  }>;\n  signOut: () => Promise<void>;\n  setUser: React.Dispatch<React.SetStateAction<User | null>>;\n}\n\n// Constantes para almacenamiento\nconst STORAGE_KEY_USER = 'crm_user';\nconst STORAGE_KEY_TOKEN = 'crm_token';\nconst STORAGE_KEY_TOKEN_EXP = 'crm_token_exp';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true); // Cambiado a true para evitar parpadeo\n  const [error, setError] = useState<Error | null>(null);\n\n  // Generar un token único para la sesión (simplificado)\n  const generateToken = (): string => {\n    const randomPart = Math.random().toString(36).substring(2, 15);\n    const timestampPart = Date.now().toString(36);\n    return `${randomPart}${timestampPart}`;\n  };\n\n  // Establecer el token con tiempo de expiración (12 horas por defecto)\n  const setSessionToken = (token: string, expireHours: number = 12) => {\n    const expiration = new Date();\n    expiration.setHours(expiration.getHours() + expireHours);\n    \n    localStorage.setItem(STORAGE_KEY_TOKEN, token);\n    localStorage.setItem(STORAGE_KEY_TOKEN_EXP, expiration.toISOString());\n  };\n\n  // Verificar si el token ha expirado\n  const isTokenExpired = (): boolean => {\n    const expirationStr = localStorage.getItem(STORAGE_KEY_TOKEN_EXP);\n    if (!expirationStr) return true;\n    \n    const expiration = new Date(expirationStr);\n    return new Date() > expiration;\n  };\n\n  // Verificar sesión al iniciar\n  useEffect(() => {\n    const checkStoredSession = () => {\n      try {\n        // Primero verificar si el token existe y no ha expirado\n        const token = localStorage.getItem(STORAGE_KEY_TOKEN);\n        \n        if (token && !isTokenExpired()) {\n          // Si el token es válido, recuperar datos del usuario\n          const storedUser = localStorage.getItem(STORAGE_KEY_USER);\n          if (storedUser) {\n            setUser(JSON.parse(storedUser));\n          }\n        } else if (token) {\n          // Si el token ha expirado, limpiar la sesión\n          console.log('La sesión ha expirado');\n          localStorage.removeItem(STORAGE_KEY_TOKEN);\n          localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n          localStorage.removeItem(STORAGE_KEY_USER);\n        }\n      } catch (error) {\n        console.error('Error checking stored session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkStoredSession();\n\n    // Listener para sincronizar múltiples pestañas\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === STORAGE_KEY_USER) {\n        if (!event.newValue) {\n          // Usuario se deslogueó en otra pestaña\n          setUser(null);\n          setSession(null);\n        } else {\n          // Usuario se logueó en otra pestaña\n          setUser(JSON.parse(event.newValue));\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Simulación de autenticación\n      if (email === 'admin@fincentiva.com' && password === 'admin123') {\n        const mockUser: User = {\n          id: '1',\n          email: 'admin@fincentiva.com',\n          name: 'Administrador',\n          role: 'SUPERADMIN',\n        };\n        \n        // Generar y guardar token de sesión\n        const token = generateToken();\n        setSessionToken(token);\n        \n        // Guardar datos del usuario\n        localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(mockUser));\n        setUser(mockUser);\n        \n        return { data: { user: mockUser }, error: null };\n      }\n      \n      const errorMsg = 'Credenciales inválidas';\n      setError(new Error(errorMsg));\n      return { data: null, error: errorMsg };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      setError(error instanceof Error ? error : new Error('Error al iniciar sesión'));\n      return { error, data: null };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signInWithCode = async (accessCode: string, userType: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('Starting signInWithCode process...');\n      console.log(`Attempting to authenticate ${userType} with code: ${accessCode}`);\n      \n      // Initialize Supabase client directly\n      const supabaseUrl = 'https://ydnygntfkrleiseuciwq.supabase.co';\n      const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkbnlnbnRma3JsZWlzZXVjaXdxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTk5MjQwNiwiZXhwIjoyMDU1NTY4NDA2fQ.TwhEGW9DK4DTQQRquT6Z9UW8T8UjLX-hp9uKdRjWAhs';\n      console.log('Creating Supabase client with URL:', supabaseUrl);\n      const supabase = createClient(supabaseUrl, supabaseKey);\n      \n      // Query the appropriate table based on user type\n      let userData = null;\n      let error = null;\n      \n      try {\n      if (userType === USER_ROLES.ADVISOR) {\n        console.log('Querying advisors table...');\n        const { data, error: queryError } = await supabase\n          .from('advisors')\n          .select('*')\n          .eq('access_code', accessCode)\n          .limit(1);\n        \n        userData = data && data.length > 0 ? data[0] : null;\n        error = queryError;\n        console.log('Advisors query result:', { dataFound: !!userData, error: error ? error.message : null });\n      } else if (userType === USER_ROLES.COMPANY_ADMIN) {\n        console.log('Querying company_admins table...');\n          \n          // First check if the table exists by doing a simple select\n          const { error: tableCheckError } = await supabase\n            .from('company_admins')\n            .select('id')\n            .limit(1);\n            \n          if (tableCheckError && \n             typeof tableCheckError === 'object' && \n             'message' in tableCheckError && \n             (tableCheckError as PostgrestError).message?.includes('relation \"company_admins\" does not exist')) {\n            console.error('The company_admins table does not exist in the database');\n            // Fall back to using the advisors table for company admins\n            const { data, error: queryError } = await supabase\n              .from('advisors')\n              .select('*')\n              .eq('access_code', accessCode)\n              .limit(1);\n            \n            userData = data && data.length > 0 ? data[0] : null;\n            error = queryError;\n            console.log('Fallback to advisors table result:', { dataFound: !!userData, error: error ? error.message : null });\n          } else {\n        const { data, error: queryError } = await supabase\n          .from('company_admins')\n          .select('*')\n          .eq('access_code', accessCode)\n          .limit(1);\n        \n        userData = data && data.length > 0 ? data[0] : null;\n        error = queryError;\n        console.log('Company admins query result:', { dataFound: !!userData, error: error ? error.message : null });\n          }\n      } else {\n        console.error('Invalid user type:', userType);\n        return { data: null, error: 'Tipo de usuario no válido' };\n        }\n      } catch (queryError) {\n        console.error('Error during database query:', queryError);\n        error = queryError;\n      }\n      \n      if (error) {\n        console.error('Database error:', error);\n        const errorMessage = error instanceof Error || (error as PostgrestError).message \n          ? (error as PostgrestError).message || error.toString() \n          : 'Error desconocido';\n        return { data: null, error: 'Error de base de datos: ' + errorMessage };\n      }\n      \n      if (!userData) {\n        console.log('No user found with provided access code');\n        return { data: null, error: 'Código de acceso inválido' };\n      }\n      \n      console.log('User data found:', { id: userData.id, email: userData.email, role: userType });\n      \n      const userInfo: User = {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        role: userType,\n        entityId: userType === USER_ROLES.COMPANY_ADMIN ? userData.company_id : userData.id,\n      };\n      \n      // Generar y guardar token de sesión\n      const token = generateToken();\n      setSessionToken(token);\n      \n      // Guardar datos del usuario\n      localStorage.setItem(STORAGE_KEY_USER, JSON.stringify(userInfo));\n      setUser(userInfo);\n      \n      console.log('Login successful, user info stored in localStorage');\n      return { data: { user: userInfo }, error: null };\n    } catch (error) {\n      console.error('Error signing in with code:', error);\n      // Ensure returned error is always a string\n      const errorObj = error instanceof Error ? error : new Error('Error al iniciar sesión');\n      setError(errorObj);\n      return { \n        error: errorObj.message, \n        data: null \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      // Eliminar todos los datos de sesión\n      localStorage.removeItem(STORAGE_KEY_USER);\n      localStorage.removeItem(STORAGE_KEY_TOKEN);\n      localStorage.removeItem(STORAGE_KEY_TOKEN_EXP);\n      setUser(null);\n      setSession(null);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    session,\n    loading,\n    error,\n    signIn,\n    signInWithCode,\n    signOut,\n    setUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}