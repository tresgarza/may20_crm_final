{"ast":null,"code":"import { getServiceClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { ErrorType, createAppError, logError, handleApiError, isRlsViolation, createRlsViolationError, createNoEffectError } from '../utils/errorHandling';\nimport { uploadClientDocuments as uploadDocs } from '../utils/documentUpload';\nimport * as clientDocumentService from './client/clientDocumentService';\n\n// Re-exportamos las interfaces para mantener compatibilidad\n\nconst USERS_TABLE = 'users';\nconst mapUserToClient = userData => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n\n  // Generar el nombre completo a partir de los componentes del nombre\n  const fullName = userData.name || [userData.first_name, userData.paternal_surname, userData.maternal_surname].filter(Boolean).join(' ');\n\n  // Crear el objeto cliente con todos los campos de la base de datos\n  const client = {\n    id: userData.id,\n    created_at: userData.created_at,\n    last_login: userData.last_login,\n    name: fullName,\n    // Campo calculado/virtual - no existe en la base de datos\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n    street_number_ext: userData.street_number_ext,\n    street_number_int: userData.street_number_int,\n    neighborhood: userData.neighborhood,\n    home_phone: userData.home_phone,\n    birth_state: userData.birth_state,\n    nationality: userData.nationality,\n    job_position: userData.job_position,\n    employer_name: userData.employer_name,\n    employer_phone: userData.employer_phone,\n    employer_address: userData.employer_address,\n    employer_activity: userData.employer_activity,\n    mortgage_payment: userData.mortgage_payment,\n    rent_payment: userData.rent_payment,\n    dependent_persons: userData.dependent_persons,\n    income_frequency: userData.income_frequency,\n    payment_method: userData.payment_method,\n    credit_purpose: userData.credit_purpose,\n    spouse_paternal_surname: userData.spouse_paternal_surname,\n    spouse_maternal_surname: userData.spouse_maternal_surname,\n    reference1_name: userData.reference1_name,\n    reference1_relationship: userData.reference1_relationship,\n    reference1_address: userData.reference1_address,\n    reference1_phone: userData.reference1_phone,\n    reference2_name: userData.reference2_name,\n    reference2_relationship: userData.reference2_relationship,\n    reference2_address: userData.reference2_address,\n    reference2_phone: userData.reference2_phone\n  };\n  return client;\n};\nexport const getClients = async filters => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login', {\n      count: 'exact'\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n      if (filters.searchQuery) {\n        query = query.or(`first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`);\n      }\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n    query = query.order('created_at', {\n      ascending: false\n    });\n    const {\n      data,\n      error,\n      count\n    } = await query;\n    if (error) {\n      logError(error, 'getClients', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    const clients = data ? data.map(mapUserToClient) : [];\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientById = async id => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    const {\n      data,\n      error\n    } = await serviceClient.from(USERS_TABLE).select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login').eq('id', id).single();\n    if (error) {\n      logError(error, 'getClientById', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n    if (!data) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `No se encontró cliente con ID: ${id}`);\n      logError(notFoundError, 'getClientById', {\n        clientId: id\n      });\n      throw notFoundError;\n    }\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nfunction escapeSQLString(str) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\nexport const getClientApplications = async clientId => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      console.error(`Error obteniendo cliente con ID ${clientId}:`, err);\n      throw handleApiError(err);\n    });\n    if (!client) {\n      const notFoundError = createAppError(ErrorType.NOT_FOUND, `El cliente no existe`);\n      logError(notFoundError, 'getClientApplications', {\n        clientId\n      });\n      return [];\n    }\n\n    // Construir la consulta con el nombre del cliente\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`, query);\n\n    // Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\n    const executeQuery = async query => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: query\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);\n        }\n        const result = await response.json();\n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        return result.data || [];\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    const data = await executeQuery(query);\n    console.log(`Aplicaciones encontradas para el cliente ${clientId}:`, data.length);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', {\n      clientId\n    });\n    console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`, error);\n    // Devolvemos un array vacío en caso de error para no interrumpir el flujo\n    return [];\n  }\n};\nexport const uploadClientDocuments = async (clientId, documents, userId) => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n  try {\n    // Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\n    const serviceClient = getServiceClient();\n\n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(serviceClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async document => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error('Datos de documento inválidos: se requiere archivo y nombre');\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: serviceClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (docError.message.includes('permission denied') || docError.message.includes('not authorized') || docError.message.includes('row level security'))) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n\n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n    const results = await Promise.all(uploadPromises);\n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', {\n      clientId\n    });\n    throw handleApiError(error);\n  }\n};\nexport const createClient = async (client, documents, userId) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id || \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\",\n      rfc: client.rfc || '',\n      curp: client.curp || ''\n    };\n\n    // Log sanitized data for debugging\n    console.log(`Creating client with sanitized data:`, JSON.stringify(userData));\n\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n\n    // Use our direct SQL function to create the client\n    const {\n      data,\n      error\n    } = await serviceClient.rpc('create_client', {\n      p_first_name: userData.first_name,\n      p_paternal_surname: userData.paternal_surname,\n      p_maternal_surname: userData.maternal_surname,\n      p_email: userData.email,\n      p_phone: userData.phone,\n      p_company_id: userData.company_id,\n      p_birth_date: userData.birth_date,\n      p_rfc: userData.rfc,\n      p_curp: userData.curp\n    });\n    if (error) {\n      console.error(\"Error creating client using RPC:\", error);\n      // Fallback to direct SQL if RPC fails\n      const {\n        data: sqlData,\n        error: sqlError\n      } = await serviceClient.rpc('execute_sql', {\n        sql: `\n          INSERT INTO users (\n            id, first_name, paternal_surname, maternal_surname, email, phone, \n            company_id, birth_date, rfc, curp, is_sso_user, is_anonymous\n          ) VALUES (\n            gen_random_uuid(), \n            '${userData.first_name}', \n            '${userData.paternal_surname}', \n            '${userData.maternal_surname}', \n            '${userData.email}', \n            '${userData.phone}', \n            '${userData.company_id}', \n            '${userData.birth_date}', \n            '${userData.rfc}', \n            '${userData.curp}',\n            false,\n            false\n          ) RETURNING id;\n        `\n      });\n      if (sqlError) {\n        logError(sqlError, 'createClient - direct SQL fallback');\n        throw handleApiError(sqlError);\n      }\n      if (!sqlData || !sqlData[0] || !sqlData[0].id) {\n        throw new Error(\"No se pudo crear el cliente (SQL directo no retornó id)\");\n      }\n\n      // Get the newly created client\n      const {\n        data: newClient,\n        error: fetchError\n      } = await serviceClient.from(USERS_TABLE).select('*').eq('id', sqlData[0].id).single();\n      if (fetchError) {\n        logError(fetchError, 'createClient - fetch after direct SQL');\n        throw handleApiError(fetchError);\n      }\n      const mappedClient = mapUserToClient(newClient);\n\n      // Handle documents if provided\n      if (documents && documents.length > 0 && userId && mappedClient.id) {\n        try {\n          console.log(`Uploading ${documents.length} documents for new client ${mappedClient.id}`);\n          const documentResult = await uploadDocs(mappedClient.id, documents);\n          console.log(`${documentResult.length} documents uploaded successfully`);\n        } catch (docError) {\n          console.error('Error uploading documents during client creation:', docError);\n          mappedClient.warningMessage = `Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      }\n      return mappedClient;\n    }\n\n    // If RPC was successful\n    const clientId = data;\n    if (!clientId) {\n      throw new Error(\"No se pudo crear el cliente (RPC no retornó id)\");\n    }\n\n    // Get the newly created client\n    const {\n      data: newClient,\n      error: fetchError\n    } = await serviceClient.from(USERS_TABLE).select('*').eq('id', clientId).single();\n    if (fetchError) {\n      logError(fetchError, 'createClient - fetch after RPC');\n      throw handleApiError(fetchError);\n    }\n    const mappedClient = mapUserToClient(newClient);\n\n    // Handle documents if provided\n    if (documents && documents.length > 0 && userId && mappedClient.id) {\n      try {\n        console.log(`Uploading ${documents.length} documents for new client ${mappedClient.id}`);\n        const documentResult = await uploadDocs(mappedClient.id, documents);\n        console.log(`${documentResult.length} documents uploaded successfully`);\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        mappedClient.warningMessage = `Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.`;\n      }\n    }\n    return mappedClient;\n  } catch (error) {\n    logError(error, 'createClient', {\n      clientData: client\n    });\n    throw handleApiError(error);\n  }\n};\nexport const updateClient = async (id, data, documents, userId) => {\n  try {\n    // Log the update operation for debugging\n    console.log(`Updating client with ID ${id}`);\n    console.log('Update data:', data);\n    console.log('Documents to upload:', (documents === null || documents === void 0 ? void 0 : documents.length) || 0);\n\n    // Get the service client for operations that require elevated privileges\n    const serviceClient = getServiceClient();\n\n    // Use our stored procedure to update the client\n    const {\n      data: updateResult,\n      error\n    } = await serviceClient.rpc('update_client', {\n      p_id: id,\n      p_updates: data\n    });\n\n    // If there was an error with the update\n    if (error) {\n      console.error('Error updating client:', error);\n      throw new Error(`Error al actualizar cliente: ${error.message}`);\n    }\n\n    // If no rows were affected (no update performed)\n    if (!updateResult) {\n      console.warn(`The update for client ${id} had no effect`);\n      throw new Error(`La actualización no tuvo efecto. Es posible que no tenga permisos para actualizar este cliente o que no haya cambios para guardar.`);\n    }\n\n    // If we have documents to upload\n    if (documents && documents.length > 0 && userId) {\n      console.log(`Processing ${documents.length} documents for client ${id}`);\n      try {\n        // Use the clientDocumentService function for better error handling\n        const documentResult = await clientDocumentService.uploadClientDocuments(id, userId, documents);\n        console.log('Document upload result:', documentResult);\n        if (!documentResult.allSuccessful && documentResult.warningMessage) {\n          // Return the client data with a warning message about document issues\n          return {\n            ...data,\n            id,\n            warningMessage: documentResult.warningMessage\n          };\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client update:', docError);\n\n        // We still return the updated client data but with a warning message\n        return {\n          ...data,\n          id,\n          warningMessage: `Se actualizó la información del cliente, pero hubo un problema al subir los documentos: ${docError instanceof Error ? docError.message : 'Error desconocido'}`\n        };\n      }\n    }\n\n    // Return the updated client data\n    return {\n      ...data,\n      id\n    };\n  } catch (error) {\n    logError(error, 'updateClient', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nexport const deleteClient = async id => {\n  try {\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n    const {\n      error,\n      count\n    } = await serviceClient.from(USERS_TABLE).delete().eq('id', id);\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('eliminar', 'cliente', id, error);\n      }\n      logError(error, 'deleteClient', {\n        clientId: id\n      });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('delete', 'cliente', id);\n    }\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', {\n      clientId: id\n    });\n    throw handleApiError(error);\n  }\n};\nexport const checkClientExists = async (email, rfc) => {\n  try {\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('id, email, rfc').eq('email', email);\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'checkClientExists', {\n        email,\n        rfc\n      });\n      throw handleApiError(error);\n    }\n    return (data === null || data === void 0 ? void 0 : data.length) > 0;\n  } catch (error) {\n    logError(error, 'checkClientExists', {\n      email,\n      rfc\n    });\n    throw handleApiError(error);\n  }\n};\nexport const getClientCount = async filters => {\n  try {\n    const serviceClient = getServiceClient();\n    let query = serviceClient.from(USERS_TABLE).select('*', {\n      count: 'exact',\n      head: true\n    });\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n    }\n    const {\n      count,\n      error\n    } = await query;\n    if (error) {\n      logError(error, 'getClientCount', {\n        filters\n      });\n      throw handleApiError(error);\n    }\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', {\n      filters\n    });\n    throw handleApiError(error);\n  }\n};","map":{"version":3,"names":["getServiceClient","TABLES","documentService","ErrorType","createAppError","logError","handleApiError","isRlsViolation","createRlsViolationError","createNoEffectError","uploadClientDocuments","uploadDocs","clientDocumentService","USERS_TABLE","mapUserToClient","userData","console","error","Error","fullName","name","first_name","paternal_surname","maternal_surname","filter","Boolean","join","client","id","created_at","last_login","email","phone","birth_date","company_id","rfc","curp","advisor_id","address","city","state","postal_code","gender","marital_status","employment_type","employment_years","monthly_income","additional_income","monthly_expenses","other_loan_balances","bank_name","bank_clabe","bank_account_number","bank_account_type","bank_account_origin","street_number_ext","street_number_int","neighborhood","home_phone","birth_state","nationality","job_position","employer_name","employer_phone","employer_address","employer_activity","mortgage_payment","rent_payment","dependent_persons","income_frequency","payment_method","credit_purpose","spouse_paternal_surname","spouse_maternal_surname","reference1_name","reference1_relationship","reference1_address","reference1_phone","reference2_name","reference2_relationship","reference2_address","reference2_phone","getClients","filters","serviceClient","query","from","select","count","eq","dateFrom","gte","dateTo","lte","searchQuery","or","page","undefined","pageSize","to","range","order","ascending","data","clients","map","totalCount","getClientById","single","clientId","notFoundError","NOT_FOUND","escapeSQLString","str","replace","getClientApplications","catch","err","APPLICATIONS","log","executeQuery","response","fetch","method","headers","body","JSON","stringify","ok","status","statusText","result","json","length","documents","userId","Array","isArray","ensureStorageBucketExists","uploadPromises","document","file","uploadParams","category","documentName","description","client_id","authClient","uploadDocument","docError","message","includes","results","Promise","all","createClient","rpc","p_first_name","p_paternal_surname","p_maternal_surname","p_email","p_phone","p_company_id","p_birth_date","p_rfc","p_curp","sqlData","sqlError","sql","newClient","fetchError","mappedClient","documentResult","warningMessage","clientData","updateClient","updateResult","p_id","p_updates","warn","allSuccessful","deleteClient","delete","checkClientExists","getClientCount","head"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/clientService.ts"],"sourcesContent":["import { supabase, getAuthenticatedClient, getServiceClient } from \"../lib/supabaseClient\";\nimport { TABLES } from \"../utils/constants/tables\";\nimport * as documentService from './documentService';\nimport { Client, ClientDocument } from \"../types/client\";\nimport { \n  ErrorType, \n  createAppError, \n  logError, \n  handleApiError, \n  isRlsViolation,\n  createRlsViolationError,\n  createNoEffectError\n} from '../utils/errorHandling';\nimport { parseNumericString, processNumericField } from '../utils/numberFormatting';\nimport { uploadClientDocuments as uploadDocs } from '../utils/documentUpload';\nimport * as clientDocumentService from './client/clientDocumentService';\n\n// Re-exportamos las interfaces para mantener compatibilidad\nexport type { Client, ClientDocument };\n\nexport interface ClientFilter {\n  searchQuery?: string;\n  advisor_id?: string;\n  company_id?: string;\n  dateFrom?: string;\n  dateTo?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nconst USERS_TABLE = 'users';\n\nconst mapUserToClient = (userData: any): Client => {\n  if (!userData) {\n    console.error('Error: userData is undefined in mapUserToClient');\n    throw new Error('No se pudo procesar la información del cliente, los datos son inválidos');\n  }\n  \n  // Generar el nombre completo a partir de los componentes del nombre\n  const fullName = userData.name || [\n    userData.first_name,\n    userData.paternal_surname,\n    userData.maternal_surname\n  ].filter(Boolean).join(' ');\n  \n  // Crear el objeto cliente con todos los campos de la base de datos\n  const client: Client = {\n    id: userData.id,\n    created_at: userData.created_at,\n    last_login: userData.last_login,\n    name: fullName, // Campo calculado/virtual - no existe en la base de datos\n    first_name: userData.first_name,\n    paternal_surname: userData.paternal_surname,\n    maternal_surname: userData.maternal_surname,\n    email: userData.email,\n    phone: userData.phone,\n    birth_date: userData.birth_date,\n    company_id: userData.company_id,\n    rfc: userData.rfc,\n    curp: userData.curp,\n    advisor_id: userData.advisor_id,\n    address: userData.address,\n    city: userData.city,\n    state: userData.state,\n    postal_code: userData.postal_code,\n    gender: userData.gender,\n    marital_status: userData.marital_status,\n    employment_type: userData.employment_type,\n    employment_years: userData.employment_years,\n    monthly_income: userData.monthly_income,\n    additional_income: userData.additional_income,\n    monthly_expenses: userData.monthly_expenses,\n    other_loan_balances: userData.other_loan_balances,\n    bank_name: userData.bank_name,\n    bank_clabe: userData.bank_clabe,\n    bank_account_number: userData.bank_account_number,\n    bank_account_type: userData.bank_account_type,\n    bank_account_origin: userData.bank_account_origin,\n    street_number_ext: userData.street_number_ext,\n    street_number_int: userData.street_number_int,\n    neighborhood: userData.neighborhood,\n    home_phone: userData.home_phone,\n    birth_state: userData.birth_state,\n    nationality: userData.nationality,\n    job_position: userData.job_position,\n    employer_name: userData.employer_name,\n    employer_phone: userData.employer_phone,\n    employer_address: userData.employer_address,\n    employer_activity: userData.employer_activity,\n    mortgage_payment: userData.mortgage_payment,\n    rent_payment: userData.rent_payment,\n    dependent_persons: userData.dependent_persons,\n    income_frequency: userData.income_frequency,\n    payment_method: userData.payment_method,\n    credit_purpose: userData.credit_purpose,\n    spouse_paternal_surname: userData.spouse_paternal_surname,\n    spouse_maternal_surname: userData.spouse_maternal_surname,\n    reference1_name: userData.reference1_name,\n    reference1_relationship: userData.reference1_relationship,\n    reference1_address: userData.reference1_address,\n    reference1_phone: userData.reference1_phone,\n    reference2_name: userData.reference2_name,\n    reference2_relationship: userData.reference2_relationship,\n    reference2_address: userData.reference2_address,\n    reference2_phone: userData.reference2_phone,\n  };\n  \n  return client;\n};\n\nexport const getClients = async (filters?: ClientFilter) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient.from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login', { count: 'exact' });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n\n      if (filters.searchQuery) {\n        query = query.or(\n          `first_name.ilike.%${filters.searchQuery}%,paternal_surname.ilike.%${filters.searchQuery}%,maternal_surname.ilike.%${filters.searchQuery}%,email.ilike.%${filters.searchQuery}%,phone.ilike.%${filters.searchQuery}%,rfc.ilike.%${filters.searchQuery}%,curp.ilike.%${filters.searchQuery}%`\n        );\n      }\n\n      if (filters.page !== undefined && filters.pageSize) {\n        const from = filters.page * filters.pageSize;\n        const to = from + filters.pageSize - 1;\n        query = query.range(from, to);\n      }\n    }\n\n    query = query.order('created_at', { ascending: false });\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      logError(error, 'getClients', { filters });\n      throw handleApiError(error);\n    }\n\n    const clients = data ? data.map(mapUserToClient) : [];\n\n    return {\n      clients,\n      totalCount: count || 0\n    };\n  } catch (error) {\n    logError(error, 'getClients', { filters });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientById = async (id: string) => {\n  try {\n    // Usamos el cliente de servicio para evitar problemas de autenticación\n    const serviceClient = getServiceClient();\n    \n    const { data, error } = await serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, first_name, paternal_surname, maternal_surname, phone, company_id, created_at, birth_date, rfc, curp, advisor_id, address, city, state, postal_code, gender, marital_status, employment_type, employment_years, monthly_income, additional_income, monthly_expenses, other_loan_balances, bank_name, bank_clabe, bank_account_number, bank_account_type, bank_account_origin, street_number_ext, street_number_int, neighborhood, home_phone, birth_state, nationality, job_position, employer_name, employer_phone, employer_address, employer_activity, mortgage_payment, rent_payment, dependent_persons, income_frequency, payment_method, credit_purpose, spouse_paternal_surname, spouse_maternal_surname, reference1_name, reference1_relationship, reference1_address, reference1_phone, reference2_name, reference2_relationship, reference2_address, reference2_phone, last_login')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      logError(error, 'getClientById', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    if (!data) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `No se encontró cliente con ID: ${id}`\n      );\n      logError(notFoundError, 'getClientById', { clientId: id });\n      throw notFoundError;\n    }\n\n    return mapUserToClient(data);\n  } catch (error) {\n    logError(error, 'getClientById', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nfunction escapeSQLString(str: string) {\n  if (!str) return '';\n  return str.replace(/'/g, \"''\");\n}\n\nexport const getClientApplications = async (clientId: string) => {\n  try {\n    const client = await getClientById(clientId).catch(err => {\n      console.error(`Error obteniendo cliente con ID ${clientId}:`, err);\n      throw handleApiError(err);\n    });\n    \n    if (!client) {\n      const notFoundError = createAppError(\n        ErrorType.NOT_FOUND,\n        `El cliente no existe`\n      );\n      logError(notFoundError, 'getClientApplications', { clientId });\n      return [];\n    }\n    \n    // Construir la consulta con el nombre del cliente\n    const query = `\n      SELECT * FROM ${TABLES.APPLICATIONS}\n      WHERE client_name = '${escapeSQLString(client.name || '')}'\n      ORDER BY created_at DESC\n    `;\n    \n    console.log(`Ejecutando consulta para obtener aplicaciones del cliente ${clientId}:`, query);\n    \n    // Utilizamos el servicio de consulta SQL directo que evita problemas de RLS\n    const executeQuery = async (query: string) => {\n      try {\n        const response = await fetch('http://localhost:3100/query', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query: query }),\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Error en la respuesta HTTP: ${response.status} ${response.statusText}`);\n        }\n        \n        const result = await response.json();\n        \n        if (result.error) {\n          console.error('Error en la consulta SQL:', result.error);\n          throw new Error(result.error);\n        }\n        \n        return result.data || [];\n      } catch (error) {\n        console.error('Error ejecutando la consulta:', error);\n        throw error;\n      }\n    };\n    \n    const data = await executeQuery(query);\n    console.log(`Aplicaciones encontradas para el cliente ${clientId}:`, data.length);\n    return data;\n  } catch (error) {\n    logError(error, 'getClientApplications', { clientId });\n    console.error(`Error completo al obtener aplicaciones para cliente ${clientId}:`, error);\n    // Devolvemos un array vacío en caso de error para no interrumpir el flujo\n    return [];\n  }\n};\n\nexport const uploadClientDocuments = async (\n  clientId: string, \n  documents: ClientDocument[],\n  userId: string\n): Promise<documentService.Document[]> => {\n  if (!clientId) {\n    console.error('Client ID is required for uploading documents');\n    throw new Error('El ID del cliente es requerido para subir documentos');\n  }\n\n  // Verificar que se proporcionaron documentos válidos\n  if (!documents || !Array.isArray(documents) || documents.length === 0) {\n    console.error('No valid documents provided for upload');\n    throw new Error('No se proporcionaron documentos válidos para subir');\n  }\n\n  if (!userId) {\n    console.error('User ID is required for uploading documents');\n    throw new Error('Se requiere el ID del usuario para subir documentos');\n  }\n\n  try {\n    // Obtener cliente con permisos de servicio para operaciones que requieren más privilegios\n    const serviceClient = getServiceClient();\n    \n    // Asegurarse de que el bucket de almacenamiento exista\n    await documentService.ensureStorageBucketExists(serviceClient);\n\n    // Intentar subir cada documento\n    const uploadPromises = documents.map(async (document) => {\n      try {\n        // Verificar que el documento tenga datos válidos\n        if (!document.file || !document.name) {\n          console.error('Invalid document data', document);\n          throw new Error(\n            'Datos de documento inválidos: se requiere archivo y nombre'\n          );\n        }\n\n        // Create a document upload request compatible with the document service\n        const uploadParams: documentService.UploadDocumentParams = {\n          file: document.file,\n          category: document.category,\n          documentName: document.name,\n          description: document.description,\n          userId: userId,\n          client_id: clientId,\n          authClient: serviceClient\n        };\n\n        // Subir el documento\n        return await documentService.uploadDocument(uploadParams);\n      } catch (docError: any) {\n        // Manejo de errores específicos de permisos RLS\n        if (docError.message && (\n            docError.message.includes('permission denied') || \n            docError.message.includes('not authorized') ||\n            docError.message.includes('row level security')\n          )) {\n          console.error('Permission error when uploading document:', docError);\n          throw new Error('No tienes permiso para subir documentos para este cliente. Verifica tus permisos.');\n        }\n        \n        // Registrar el error pero permitir que otros uploads continúen\n        console.error(`Error uploading document for client ${clientId}:`, docError);\n        throw docError;\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    \n    return results;\n  } catch (error) {\n    logError(error, 'uploadClientDocuments', { clientId });\n    throw handleApiError(error);\n  }\n};\n\nexport const createClient = async (client: Omit<Client, 'id' | 'created_at'>, documents?: ClientDocument[], userId?: string) => {\n  try {\n    // Create a copy to avoid modifying the original object\n    const userData = {\n      email: client.email,\n      first_name: client.first_name || '',\n      paternal_surname: client.paternal_surname || '',\n      maternal_surname: client.maternal_surname || '',\n      phone: client.phone,\n      birth_date: client.birth_date,\n      company_id: client.company_id || \"70b2aa97-a5b6-4b5e-91db-be8acbd3701a\",\n      rfc: client.rfc || '',\n      curp: client.curp || '',\n    };\n\n    // Log sanitized data for debugging\n    console.log(`Creating client with sanitized data:`, JSON.stringify(userData));\n\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n\n    // Use our direct SQL function to create the client\n    const { data, error } = await serviceClient.rpc('create_client', {\n      p_first_name: userData.first_name,\n      p_paternal_surname: userData.paternal_surname,\n      p_maternal_surname: userData.maternal_surname,\n      p_email: userData.email,\n      p_phone: userData.phone,\n      p_company_id: userData.company_id,\n      p_birth_date: userData.birth_date,\n      p_rfc: userData.rfc,\n      p_curp: userData.curp\n    });\n\n    if (error) {\n      console.error(\"Error creating client using RPC:\", error);\n      // Fallback to direct SQL if RPC fails\n      const { data: sqlData, error: sqlError } = await serviceClient.rpc('execute_sql', {\n        sql: `\n          INSERT INTO users (\n            id, first_name, paternal_surname, maternal_surname, email, phone, \n            company_id, birth_date, rfc, curp, is_sso_user, is_anonymous\n          ) VALUES (\n            gen_random_uuid(), \n            '${userData.first_name}', \n            '${userData.paternal_surname}', \n            '${userData.maternal_surname}', \n            '${userData.email}', \n            '${userData.phone}', \n            '${userData.company_id}', \n            '${userData.birth_date}', \n            '${userData.rfc}', \n            '${userData.curp}',\n            false,\n            false\n          ) RETURNING id;\n        `\n      });\n      \n      if (sqlError) {\n        logError(sqlError, 'createClient - direct SQL fallback');\n        throw handleApiError(sqlError);\n      }\n      \n      if (!sqlData || !sqlData[0] || !sqlData[0].id) {\n        throw new Error(\"No se pudo crear el cliente (SQL directo no retornó id)\");\n      }\n      \n      // Get the newly created client\n      const { data: newClient, error: fetchError } = await serviceClient\n        .from(USERS_TABLE)\n        .select('*')\n        .eq('id', sqlData[0].id)\n        .single();\n        \n      if (fetchError) {\n        logError(fetchError, 'createClient - fetch after direct SQL');\n        throw handleApiError(fetchError);\n      }\n      \n      const mappedClient = mapUserToClient(newClient);\n      \n      // Handle documents if provided\n      if (documents && documents.length > 0 && userId && mappedClient.id) {\n        try {\n          console.log(`Uploading ${documents.length} documents for new client ${mappedClient.id}`);\n          const documentResult = await uploadDocs(mappedClient.id, documents);\n          console.log(`${documentResult.length} documents uploaded successfully`);\n        } catch (docError) {\n          console.error('Error uploading documents during client creation:', docError);\n          mappedClient.warningMessage = `Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.`;\n        }\n      }\n      \n      return mappedClient;\n    }\n\n    // If RPC was successful\n    const clientId = data;\n    \n    if (!clientId) {\n      throw new Error(\"No se pudo crear el cliente (RPC no retornó id)\");\n    }\n    \n    // Get the newly created client\n    const { data: newClient, error: fetchError } = await serviceClient\n      .from(USERS_TABLE)\n      .select('*')\n      .eq('id', clientId)\n      .single();\n      \n    if (fetchError) {\n      logError(fetchError, 'createClient - fetch after RPC');\n      throw handleApiError(fetchError);\n    }\n    \n    const mappedClient = mapUserToClient(newClient);\n    \n    // Handle documents if provided\n    if (documents && documents.length > 0 && userId && mappedClient.id) {\n      try {\n        console.log(`Uploading ${documents.length} documents for new client ${mappedClient.id}`);\n        const documentResult = await uploadDocs(mappedClient.id, documents);\n        console.log(`${documentResult.length} documents uploaded successfully`);\n      } catch (docError) {\n        console.error('Error uploading documents during client creation:', docError);\n        mappedClient.warningMessage = `Se creó el cliente, pero hubo un problema al subir los documentos. Puede intentar agregarlos nuevamente más tarde.`;\n      }\n    }\n\n    return mappedClient;\n  } catch (error) {\n    logError(error, 'createClient', { clientData: client });\n    throw handleApiError(error);\n  }\n};\n\nexport const updateClient = async (\n  id: string, \n  data: Partial<Client>, \n  documents?: ClientDocument[],\n  userId?: string\n): Promise<Partial<Client>> => {\n  try {\n    // Log the update operation for debugging\n    console.log(`Updating client with ID ${id}`);\n    console.log('Update data:', data);\n    console.log('Documents to upload:', documents?.length || 0);\n\n    // Get the service client for operations that require elevated privileges\n    const serviceClient = getServiceClient();\n    \n    // Use our stored procedure to update the client\n    const { data: updateResult, error } = await serviceClient.rpc('update_client', {\n      p_id: id,\n      p_updates: data\n    });\n    \n    // If there was an error with the update\n    if (error) {\n      console.error('Error updating client:', error);\n      throw new Error(`Error al actualizar cliente: ${error.message}`);\n    }\n    \n    // If no rows were affected (no update performed)\n    if (!updateResult) {\n      console.warn(`The update for client ${id} had no effect`);\n      throw new Error(`La actualización no tuvo efecto. Es posible que no tenga permisos para actualizar este cliente o que no haya cambios para guardar.`);\n    }\n    \n    // If we have documents to upload\n    if (documents && documents.length > 0 && userId) {\n      console.log(`Processing ${documents.length} documents for client ${id}`);\n      try {\n        // Use the clientDocumentService function for better error handling\n        const documentResult = await clientDocumentService.uploadClientDocuments(id, userId, documents);\n        console.log('Document upload result:', documentResult);\n        \n        if (!documentResult.allSuccessful && documentResult.warningMessage) {\n          // Return the client data with a warning message about document issues\n          return {\n            ...data,\n            id,\n            warningMessage: documentResult.warningMessage\n          };\n        }\n      } catch (docError) {\n        console.error('Error uploading documents during client update:', docError);\n        \n        // We still return the updated client data but with a warning message\n        return {\n          ...data,\n          id,\n          warningMessage: `Se actualizó la información del cliente, pero hubo un problema al subir los documentos: ${docError instanceof Error ? docError.message : 'Error desconocido'}`\n        };\n      }\n    }\n    \n    // Return the updated client data\n    return {\n      ...data,\n      id\n    };\n  } catch (error) {\n    logError(error, 'updateClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const deleteClient = async (id: string) => {\n  try {\n    // Get the service client for this operation\n    const serviceClient = getServiceClient();\n    \n    const { error, count } = await serviceClient\n      .from(USERS_TABLE)\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      // Verificar si es una violación de RLS\n      if (isRlsViolation(error)) {\n        throw createRlsViolationError('eliminar', 'cliente', id, error);\n      }\n      \n      logError(error, 'deleteClient', { clientId: id });\n      throw handleApiError(error);\n    }\n\n    // Verify that rows were affected\n    if (count === 0) {\n      console.warn(`Delete operation didn't affect any rows for client ${id}`);\n      throw createNoEffectError('delete', 'cliente', id);\n    }\n\n    return true;\n  } catch (error) {\n    logError(error, 'deleteClient', { clientId: id });\n    throw handleApiError(error);\n  }\n};\n\nexport const checkClientExists = async (email: string, rfc?: string) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('id, email, rfc')\n      .eq('email', email);\n\n    if (rfc) {\n      query = query.or(`rfc.eq.${rfc}`);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      logError(error, 'checkClientExists', { email, rfc });\n      throw handleApiError(error);\n    }\n\n    return data?.length > 0;\n  } catch (error) {\n    logError(error, 'checkClientExists', { email, rfc });\n    throw handleApiError(error);\n  }\n};\n\nexport const getClientCount = async (filters?: ClientFilter) => {\n  try {\n    const serviceClient = getServiceClient();\n    \n    let query = serviceClient\n      .from(USERS_TABLE)\n      .select('*', { count: 'exact', head: true });\n\n    if (filters) {\n      if (filters.advisor_id) {\n        query = query.eq('advisor_id', filters.advisor_id);\n      }\n\n      if (filters.company_id) {\n        query = query.eq('company_id', filters.company_id);\n      }\n\n      if (filters.dateFrom) {\n        query = query.gte('created_at', filters.dateFrom);\n      }\n\n      if (filters.dateTo) {\n        query = query.lte('created_at', filters.dateTo);\n      }\n    }\n\n    const { count, error } = await query;\n\n    if (error) {\n      logError(error, 'getClientCount', { filters });\n      throw handleApiError(error);\n    }\n\n    return count || 0;\n  } catch (error) {\n    logError(error, 'getClientCount', { filters });\n    throw handleApiError(error);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}