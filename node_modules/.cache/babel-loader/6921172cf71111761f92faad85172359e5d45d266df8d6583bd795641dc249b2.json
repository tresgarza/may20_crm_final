{"ast":null,"code":"/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\nimport { executeQuery as databaseExecuteQuery } from '../utils/databaseUtils';\n/**\n * Execute a SQL query using the database utilities\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async query => {\n  try {\n    console.log('üîç MCP Service: Ejecutando consulta:', query);\n\n    // Use the databaseUtils.executeQuery function instead of making HTTP requests\n    const data = await databaseExecuteQuery(query);\n    console.log('üîç MCP Service: Respuesta:', data);\n    return {\n      data\n    };\n  } catch (error) {\n    console.error('üîç MCP Service: Error:', error);\n    return {\n      error: error.message || 'Error ejecutando consulta'\n    };\n  }\n};\n\n/**\n * Simple ping to check if database connection is available\n * @returns true if connection is available, false otherwise\n */\nexport const pingMcpServer = async () => {\n  try {\n    // Execute a simple query to check database connection\n    const result = await executeQuery('SELECT 1 as connection_test');\n    return Boolean(result.data && result.data.length > 0);\n  } catch (error) {\n    console.error('Database connection test failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["executeQuery","databaseExecuteQuery","query","console","log","data","error","message","pingMcpServer","result","Boolean","length"],"sources":["/Users/diegogg98/NEW CRM MAR18/src/services/mcpService.ts"],"sourcesContent":["/**\n * Service for MCP (Mini Client Protocol) \n * Used for executing direct SQL queries to our custom PostgreSQL server\n */\nimport { executeQuery as databaseExecuteQuery } from '../utils/databaseUtils';\n\ninterface QueryResponse {\n  data?: any[];\n  error?: string;\n}\n\n/**\n * Execute a SQL query using the database utilities\n * @param query SQL query to execute\n * @returns QueryResponse with data array or error message\n */\nexport const executeQuery = async (query: string): Promise<QueryResponse> => {\n  try {\n    console.log('üîç MCP Service: Ejecutando consulta:', query);\n    \n    // Use the databaseUtils.executeQuery function instead of making HTTP requests\n    const data = await databaseExecuteQuery(query);\n    \n    console.log('üîç MCP Service: Respuesta:', data);\n    return { data };\n  } catch (error: any) {\n    console.error('üîç MCP Service: Error:', error);\n    return { error: error.message || 'Error ejecutando consulta' };\n  }\n};\n\n/**\n * Simple ping to check if database connection is available\n * @returns true if connection is available, false otherwise\n */\nexport const pingMcpServer = async (): Promise<boolean> => {\n  try {\n    // Execute a simple query to check database connection\n    const result = await executeQuery('SELECT 1 as connection_test');\n    return Boolean(result.data && result.data.length > 0);\n  } catch (error) {\n    console.error('Database connection test failed:', error);\n    return false;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,IAAIC,oBAAoB,QAAQ,wBAAwB;AAO7E;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMD,YAAY,GAAG,MAAOE,KAAa,IAA6B;EAC3E,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEF,KAAK,CAAC;;IAE1D;IACA,MAAMG,IAAI,GAAG,MAAMJ,oBAAoB,CAACC,KAAK,CAAC;IAE9CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,IAAI,CAAC;IAC/C,OAAO;MAAEA;IAAK,CAAC;EACjB,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnBH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACC,OAAO,IAAI;IAA4B,CAAC;EAChE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAA8B;EACzD,IAAI;IACF;IACA,MAAMC,MAAM,GAAG,MAAMT,YAAY,CAAC,6BAA6B,CAAC;IAChE,OAAOU,OAAO,CAACD,MAAM,CAACJ,IAAI,IAAII,MAAM,CAACJ,IAAI,CAACM,MAAM,GAAG,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}